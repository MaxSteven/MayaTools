-- Created by John A. Martini and Andru Phoenix
  --John A. Martini
    -- JokerMartini@hotmail.com
    -- www.JokerMartini.com
  -- Andru J. Phoenix
    -- AndruServices@gmail.com
    -- www.bigseksi.com

--The Key Transfer Script--
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
(
--//Black Underline
fn BlackUnderline =
  (
    --Pieces
    bmSettingsBlack=bitmap 200 1 color:black
    --Text
    return bmSettingsBlack
  )

--//Settings Icon Creation Function
fn DeleteSettingsLogo =
  (
    --Pieces
    bmSettingsBlack=bitmap 10 10 color:black
    bmSettingsWhite=bitmap 8 6 color:white
    --Text
    for o in (#([0,0])) do
    (
    pasteBitmap bmSettingsWhite bmSettingsBlack (box2 0 0 8 6) [1,3] maskColor:white
    )
    return bmSettingsBlack
  )

--//Key Transfer Animation Button Creation Function
  fn KeyTransferAnimationButton = 
  (
  --//Pieces
  local KeyTransferLogoParts=bitmap 168 24
  fn unpack val = for p in val collect (r=p/256^2; g=p/256-r*256; b=mod p 256; color r g b)
  setpixels KeyTransferLogoParts [0,0] (unpack
  setpixels KeyTransferLogoParts [0,1] (unpack
  setpixels KeyTransferLogoParts [0,2] (unpack
  setpixels KeyTransferLogoParts [0,3] (unpack
  setpixels KeyTransferLogoParts [0,4] (unpack
  setpixels KeyTransferLogoParts [0,5] (unpack
  setpixels KeyTransferLogoParts [0,6] (unpack
  setpixels KeyTransferLogoParts [0,7] (unpack
  setpixels KeyTransferLogoParts [0,8] (unpack #(16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 197379, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 197379, 16777215, 197379, 197379, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 986895, 986895, 986895, 986895, 986895, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 197379, 197379, 16777215, 197379, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 197379, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215))
  setpixels KeyTransferLogoParts [0,9] (unpack #(16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 197379, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 16777215, 197379, 197379, 197379, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 197379, 197379, 197379, 16777215, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 197379, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215))
  setpixels KeyTransferLogoParts [0,10] (unpack #(16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 197379, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 16777215, 197379, 197379, 197379, 197379, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 197379, 197379, 197379, 197379, 16777215, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 11484991, 197379, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215))
  setpixels KeyTransferLogoParts [0,11] (unpack #(16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 197379, 4166207, 4166207, 4166207, 4166207, 4166207, 4166207, 4166207, 4166207, 4166207, 16777215, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 16777215, 16777215, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 16777215, 986895, 986895, 16777215, 16777215, 986895, 986895, 986895, 16777215, 16777215, 986895, 16777215, 986895, 986895, 16777215, 16777215, 16777215, 986895, 986895, 16777215, 16777215, 986895, 986895, 16777215, 16777215, 986895, 986895, 986895, 16777215, 16777215, 986895, 986895, 16777215, 16777215, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 16777215, 4166207, 4166207, 4166207, 4166207, 4166207, 4166207, 4166207, 4166207, 4166207, 197379, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215))
  setpixels KeyTransferLogoParts [0,12] (unpack #(16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 197379, 4166207, 4166207, 4166207, 4166207, 4166207, 4166207, 4166207, 4166207, 16777215, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 16777215, 16777215, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 986895, 16777215, 986895, 986895, 16777215, 16777215, 986895, 16777215, 986895, 16777215, 16777215, 986895, 16777215, 986895, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 986895, 16777215, 986895, 16777215, 16777215, 16777215, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 16777215, 4166207, 4166207, 4166207, 4166207, 4166207, 4166207, 4166207, 4166207, 197379, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215))
  setpixels KeyTransferLogoParts [0,13] (unpack #(16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 197379, 4166207, 4166207, 4166207, 4166207, 4166207, 4166207, 4166207, 4166207, 4166207, 16777215, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 16777215, 16777215, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 986895, 986895, 986895, 986895, 16777215, 986895, 16777215, 16777215, 16777215, 986895, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 986895, 16777215, 16777215, 986895, 986895, 986895, 986895, 986895, 16777215, 986895, 16777215, 16777215, 16777215, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 197379, 16777215, 4166207, 4166207, 4166207, 4166207, 4166207, 4166207, 4166207, 4166207, 4166207, 197379, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215))
  setpixels KeyTransferLogoParts [0,14] (unpack #(16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 197379, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 16777215, 197379, 197379, 197379, 197379, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 16777215, 986895, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 986895, 16777215, 986895, 16777215, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 986895, 16777215, 16777215, 986895, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 197379, 197379, 197379, 197379, 16777215, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 197379, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215))
  setpixels KeyTransferLogoParts [0,15] (unpack #(16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 197379, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 16777215, 197379, 197379, 197379, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 16777215, 986895, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 986895, 16777215, 986895, 16777215, 16777215, 16777215, 986895, 16777215, 986895, 16777215, 16777215, 986895, 16777215, 986895, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 986895, 16777215, 986895, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 197379, 197379, 197379, 16777215, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 197379, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215))
  setpixels KeyTransferLogoParts [0,16] (unpack #(16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 197379, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 197379, 16777215, 197379, 197379, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 986895, 986895, 986895, 986895, 16777215, 986895, 16777215, 16777215, 16777215, 986895, 16777215, 16777215, 986895, 986895, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 986895, 986895, 986895, 16777215, 16777215, 986895, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 197379, 197379, 16777215, 197379, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 4145134, 197379, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215))
  setpixels KeyTransferLogoParts [0,17] (unpack
  setpixels KeyTransferLogoParts [0,18] (unpack
  setpixels KeyTransferLogoParts [0,19] (unpack
  setpixels KeyTransferLogoParts [0,20] (unpack
  setpixels KeyTransferLogoParts [0,21] (unpack
  setpixels KeyTransferLogoParts [0,22] (unpack
  setpixels KeyTransferLogoParts [0,23] (unpack
  return KeyTransferLogoParts
  )
  
--//Key Transfer Logo Creation Function
fn KeyTransferLogo =
  (
  --Pieces
  kTLogoColor_01=bitmap 24 24 color:[255,255,255] --//white
  kTLogoColor_02=bitmap 1 11 color:[25,25,25] --//dark grey
  kTLogoColor_03=bitmap 13 11 color:[63,63,63] --//grey
  kTLogoColor_04=bitmap 11 3 color:[173,63,63] --//red
  kTLogoColor_05=bitmap 11 3 color:[63,173,63] --//green
  kTLogoColor_06=bitmap 11 3 color:[63,63,238] --//blue
  kTLogoColor_07=bitmap 5 5 color:[25,25,25] --//black
  kTLogoColor_08=bitmap 8 7 color:[255,255,255] --//white
  --Text
    for o in (#([0,0])) do
    (
    --//Map Creation
    pasteBitmap kTLogoColor_03 kTLogoColor_01 (box2 0 0 13 11) [0,0] maskColor:white
    pasteBitmap kTLogoColor_03 kTLogoColor_01 (box2 0 0 13 11) [11,13] maskColor:white
    pasteBitmap kTLogoColor_02 kTLogoColor_01 (box2 0 0 1 11) [0,0]
    pasteBitmap kTLogoColor_02 kTLogoColor_01 (box2 0 0 1 11) [12,0]
    pasteBitmap kTLogoColor_02 kTLogoColor_01 (box2 0 0 1 11) [11,13]
    pasteBitmap kTLogoColor_02 kTLogoColor_01 (box2 0 0 1 11) [23,13]
    pasteBitmap kTLogoColor_04 kTLogoColor_01 (box2 0 0 11 3) [1,1]
    pasteBitmap kTLogoColor_05 kTLogoColor_01 (box2 0 0 11 3) [1,4]
    pasteBitmap kTLogoColor_06 kTLogoColor_01 (box2 0 0 11 3) [1,7]
    pasteBitmap kTLogoColor_04 kTLogoColor_01 (box2 0 0 11 3) [12,14]
    pasteBitmap kTLogoColor_05 kTLogoColor_01 (box2 0 0 11 3) [12,17]
    pasteBitmap kTLogoColor_06 kTLogoColor_01 (box2 0 0 11 3) [12,20]
    --//White
    pasteBitmap kTLogoColor_08 kTLogoColor_01 (box2 0 0 8 7) [5,5]
    pasteBitmap kTLogoColor_08 kTLogoColor_01 (box2 0 0 8 7) [11,12]
    --//Arrow
    pasteBitmap kTLogoColor_07 kTLogoColor_01 (box2 0 0 5 5) [6,6]
    pasteBitmap kTLogoColor_07 kTLogoColor_01 (box2 0 0 5 5) [13,13]
    pasteBitmap kTLogoColor_07 kTLogoColor_01 (box2 0 0 2 2) [10,6]
    pasteBitmap kTLogoColor_07 kTLogoColor_01 (box2 0 0 1 1) [12,6]
    pasteBitmap kTLogoColor_07 kTLogoColor_01 (box2 0 0 2 2) [6,10]
    pasteBitmap kTLogoColor_07 kTLogoColor_01 (box2 0 0 1 1) [6,12]

    pasteBitmap kTLogoColor_07 kTLogoColor_01 (box2 0 0 2 2) [16,12]
    pasteBitmap kTLogoColor_07 kTLogoColor_01 (box2 0 0 1 1) [17,11]
    
    pasteBitmap kTLogoColor_07 kTLogoColor_01 (box2 0 0 2 2) [12,16]
    pasteBitmap kTLogoColor_07 kTLogoColor_01 (box2 0 0 1 1) [11,17]
    
    pasteBitmap kTLogoColor_07 kTLogoColor_01 (box2 0 0 2 2) [10,10]
    pasteBitmap kTLogoColor_07 kTLogoColor_01 (box2 0 0 2 2) [11,11]
    pasteBitmap kTLogoColor_07 kTLogoColor_01 (box2 0 0 2 2) [12,12] maskColor:white
    )
    return kTLogoColor_01
  )
  
--//Globals
global roBasic -- Basic Parameters
global roKeyParams -- Key Parameters
global roTracksStagger -- Advanced Parameters
global roAbout -- About
global roSection5 -- Track Wiggler
global rfKeyTransfer
global fnWiggleTracks
global rl_floater
global roTracksWiggler
local floaterHeight
local floaterWidth
global barTarget = 0.0
global progressBarColor = [63,146,63]
  
--//Locals
local userAnimatedObj = undefined
local userPinObj = undefined 
local userProxObj = undefined
local bufferedObjs = undefined  
local userOrderBy = "selection"
local offsetType = "relative"
local staggerEasing = "linear"  
local previewEnabled = false
local reverseKeys = false
local sortType = "radial"
local linearAxis = "Z"
local autoDelete = false
local deleteTransKeys = true
local deleteModKeys = false
local deleteMods = false

  
--// Variables
KeysMin = 0
KeysMax = 0
ValueMin = 0
ValueMax = 0
IntensityMin = 1
IntensityMax = 1

obj_collection = #() -- stores preview objects
mtl_collection = #() -- stores original wirecolors

--// Easing Equations  
function easeInOutCubic t b c d = 
(
  -- itemIndex Zero FramesTotal itemCount
  _currentTime = t
  _beginValue = b
  _target = c
  _duration = d
  
  if ((t / (d * 0.5)) < 1) then 
  ( 
    t = t / (d * 0.5)
    return (c/2*t*t*t + b) 
  ) else 
  (
    t = t / (d * 0.5)
    return (c/2*((t-=2)*t*t + 2) + b)
  )
)

function easeInCubic t b c d = 
(
  t = t/d
  return c*(t)*t*t + b;
)

function easeOutCubic t b c d = 
(
  t = t / d - 1 
  return c*((t)*t*t + 1) + b;
)

function easeInCirc t b c d = 
(
  t = t / d
  return -c * (sqrt (1 - (t)*t) - 1) + b;
)

function easeOutCirc t b c d = 
(
  t = t / d - 1 
  return c * ( sqrt (1 - (t)*t) ) + b;
)

function easeInOutCirc t b c d = 
(  
  if ((t / (d * 0.5)) < 1) then 
  (
    t = t / (d * 0.5)
    return -c/2 * (sqrt (1 - t*t) - 1) + b;
  ) else
  (
    t = t / (d * 0.5)
    t = t - 2
    return c/2 * (sqrt (1 - (t)*t) + 1) + b;
  )
)

--// Distance Array Sorters
local distanceHelper  

fn byRadial a b = --// qsort function that compares the distances from the proximity object of two objects (a & b) and returns a positive number if a is further than b
(
  local d = length (a.position - distanceHelper.position) - length(b.position - distanceHelper.position)
  case of
  (
    (d < 0): -1
    (d > 0): 1
    default: 0
  )
)

fn byLinear a b =
(  
  if(linearAxis == "X") then
  (
    aPos = (in coordsys distanceHelper a.pos).x
    bPos = (in coordsys distanceHelper b.pos).x  
  )
  if(linearAxis == "Y") then
  (
    aPos = (in coordsys distanceHelper a.pos).y
    bPos = (in coordsys distanceHelper b.pos).y
  )
  if(linearAxis == "Z") then
  (
    aPos = (in coordsys distanceHelper a.pos).z
    bPos = (in coordsys distanceHelper b.pos).z
  )
  if(aPos < 0) then aPos *= -1
  if(bPos < 0) then bPos *= -1  
  local d = aPos - bPos
  case of
  (
    (d < 0): -1
    (d > 0): 1
    default: 0
  )
)

--// Sorts a selection of objects by distance to an object, seperates the objects into groups based on a distance threshold and returns a multidimensional array populated by said groups
fn radialSort theSet theTarget =
(
  distanceHelper = theTarget -- creates an instance of theTarget. this is due to a sandbox limitation of qsort's complimentary function "byRadial"
  qsort theSet byRadial -- sorts a selection of objects by distance to an object  
  dist_collection = #(#(undefined))
  for i = 1 to theSet.count do --  seperates the objects into array with cached distance for dynamic group sorting
  (
    dist = distance theSet[i].position theTarget.position
    dist_collection[i] = #(theSet[i], dist)
  )  
  return dist_collection
)

fn linearSort theSet theTarget =
(
  distanceHelper = theTarget -- creates an instance of theTarget. this is due to a sandbox limitation of qsort's complimentary function "byRadial"
  qsort theSet byLinear -- sorts a selection of objects by distance to an object
  dist_collection = #(#(undefined))
  for i = 1 to theSet.count do --  seperates the objects into array with cached distance for dynamic group sorting
  (
    if(linearAxis == "X") then dist = (in coordsys theTarget theSet[i].pos).x
    if(linearAxis == "Y") then dist = (in coordsys theTarget theSet[i].pos).y
    if(linearAxis == "Z") then dist = (in coordsys theTarget theSet[i].pos).z  
    if(dist < 0) then dist *= -1    
    dist_collection[i] = #(theSet[i], dist)
  )  
  return dist_collection
)

--// Distance Array Grouper

fn groupByThreshold distanceArray threshold =
(
    groupCursor = 1 --tracks the current group objects are being sorted into
    objIndex = 1 -- tracks the current object being sorted
    distCursor = 0 -- tracks the current distance threshold
    groupArray = #(#(undefined)) -- creates an empty array to file the groups of objects into    
    for i = 1 to distanceArray.count do --  seperates the objects into groups based on a distance threshold 
    (
      dist = distanceArray[i][2]
      distLimit = (distCursor + threshold)      
      if(dist < distLimit ) then -- if distance is less than group tolerance
      (
        groupArray[groupCursor][objIndex] = distanceArray[i][1]    
        objIndex += 1 -- increment object index  
        -- proceed
      ) else (
        distCursor = dist
        groupCount = groupArray[groupCursor].count
        if(groupCount >= 1 and groupArray[groupCursor][1] != undefined) then 
        (
          groupCursor += 1 -- increment group index
          objIndex = 1
          groupArray[groupCursor] = #(distanceArray[i][1])
          objIndex = 2 
        ) else (
          groupArray[groupCursor][objIndex] = distanceArray[i][1]    
          objIndex += 1 -- increment object index  
        )    
        
      )  
    )  
    return groupArray -- returns a multidimensional array populated by said groups  
)

  
fn cacheWireMaterials userSel =
(
  obj_collection = #() -- stores preview objects
  mtl_collection = #() -- stores original wirecolors    
  if userSel.count !=0 then
  (            
    --// Storing the selected objects materials as arrays
    for o in userSel do 
    (
      try
      (
        m = o.wirecolor
        if m != undefined then
        (
          append obj_collection o
          append mtl_collection m
        )
      )
      catch
      (
      )
    )
    
  )
)

fn restoreWireMaterials =    
(
  --// Restore previous materials
  for i = 1 to obj_collection.count do 
  (
    try
    (
    obj_collection[i].wirecolor = mtl_collection[i]
    )
    catch
    (            
    )
  )
)

fn colorGroups theGroup = 
(
  if theGroup.count !=0 then
  (          
    color_01 = color 255 0 0
    color_02 = color 255 255 0
    stepsizeA_r = (color_02.r - color_01.r)/theGroup.count
    stepsizeA_g = (color_02.g - color_01.g)/theGroup.count
    stepsizeA_b = (color_02.b - color_01.b)/theGroup.count
    
    color_03 = color 200 0 0
    color_04 = color 200 200 0
    stepsizeB_r = (color_04.r - color_03.r)/theGroup.count
    stepsizeB_g = (color_04.g - color_03.g)/theGroup.count
    stepsizeB_b = (color_04.b - color_03.b)/theGroup.count        
    groupCursor = 1
    isOdd = true
    for s in theGroup do
    (
      newColorA = (color ((groupCursor*stepsizeA_r)+ color_01.r-stepsizeA_r) ((groupCursor*stepsizeA_g)+color_01.g-stepsizeA_g) ((groupCursor*stepsizeA_b)+color_01.b-stepsizeA_b))
      newColorB = (color ((groupCursor*stepsizeB_r)+ color_03.r-stepsizeB_r) ((groupCursor*stepsizeB_g)+color_03.g-stepsizeB_g) ((groupCursor*stepsizeB_b)+color_03.b-stepsizeB_b))
      
      for i in s do
      (
        i.wirecolor = newColorB
        if(isOdd) then ( i.wirecolor = newColorA ) else ( i.wirecolor = newColorB)
      )    
      groupCursor += 1
      if(isOdd) then ( isOdd = false ) else ( isOdd = true)
    )
  )
)

fn reverseArray theArray =
(  
  reversedArray = #()  
  for i = 1 to theArray.count do 
  (
    index = (theArray.count +1) - i
    reversedArray[index] = theArray[i]
  )
  return reversedArray
)

fn deleteAction =
(
  userSel = getCurrentSelection ()  
  if(deleteTransKeys) then 
  (
    sliderTime = 0f
    for obj in userSel do
    (
    deleteKeys userSel #allKeys
    --deletekeys obj.pos.track
    --deletekeys obj.rotation.track
    --deletekeys obj.scale.track
    --deletekeys obj.visibility.track
    )
  )
  if(deleteModKeys) then 
  (
    sliderTime = 0f
    for obj in userSel do
    (
    deletekeys obj.modifiers[1] 
    )
  )
  if(deleteMods) then (
    for i = 1 to userSel.count do
    (
      hasKTMods = true
      while hasKTMods do
      (    
        modList = #()
        for j = 1 to userSel[i].modifiers.count do
        (      
          modName = userSel[i].modifiers[j].name as string
          searchSum = findString modName "KT."
          if searchSum != undefined then (
            append modList j
          )
        )
        if modList.count >= 1 then deleteModifier userSel[i] modList[1] else hasKTMods = false
      )
    )    
  )
)

--//The Dialog
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
--// Basic Parameters
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
rollout roBasic "Basic Parameters"
(
  group "Animated Object"
  (
  pickButton btn_pickBox "Pick Animated Object" width:160 height:24 tooltip:"Pick Animated Object"
  )
  
  group "Transform Relation"
  (
  radioButtons rdooffsetType "" width:88 height:15 labels:#("Relative", "Absolute") offset:[-35,-2]
  )
  group "Position Axis's"
  (
  checkbox chkxPos "X" across: 3 offset:[0,0]
  checkbox chkyPos "Y" offset:[14,0]
  checkbox chkzPos "Z" offset:[24,0]
  )
  group "Orientation Axis's"
  (
  checkbox chkxRot "X" across: 3 offset:[0,0]
  checkbox chkyRot "Y" offset:[14,0]
  checkbox chkzRot "Z" offset:[24,0]
  )
  group "Scale Axis's"
  (
  checkbox chkxScale "X" across: 3 offset:[0,0]
  checkbox chkyScale "Y" offset:[14,0]
  checkbox chkzScale "Z" offset:[24,0]
  )
  group "Other"
  (
  checkbox chkVisibility "Visibility" across: 2 offset:[0,0]
  checkbox chkModifier "Modifiers"  offset:[-12,0]
  )
  
  button btn_deleteKeys "Delete" width:121 height:16 across: 3 offset:[27,0]
  checkbutton btn_autoDelete "Auto" width: 32 height:16 offset:[53,0]
  button btn_deleteSettings "" width:16 height:16 color:red offset:[26,0]
  button btn_transferAnimation "" width:170 height:26 color:red
  progressbar theProgressbar "Progressbar:" value:0 width:170 height:12 offset:[-8,0] color:progressBarColor
  timer barSlide interval:10 active: false

--//Delete Settings Dialog
  on btn_deleteSettings pressed do
  (
      rollout rlDeleteSettings "Delete Settings"
      (
      label lbDeleteSettings "What would you like to delete?"
      imgTag itUnderline style:#bmp_center bitmap:(BlackUnderline()) transparent:(color 255 255 255)
      checkbox chkDeleteKeys "Transform Keys" checked:deleteTransKeys
      checkbox chkDeleteModKeys "Copied Modifier Keys" checked:deleteModKeys
      checkbox chkDeleteMods "Copied Modifiers" checked:deleteMods
      button btnClose "Close" width:200 height:20
        
      --//Button Close Actions
      On btnClose pressed do
      (
      try (DestroyDialog rlDeleteSettings) catch()--rlDeleteSettings
      )      
      on chkDeleteKeys changed theState do
      (
        if(theState) then deleteTransKeys = true else deleteTransKeys = false
      )      
      on chkDeleteModKeys changed theState do
      (
        if(theState) then deleteModKeys = true else deleteModKeys = false
      )      
      on chkDeleteMods changed theState do
      (
        if(theState) then deleteMods = true else deleteMods = false
      )  
      
    )
    createDialog rlDeleteSettings 225 113 style:#(#style_SysMenu, #style_toolwindow)
  )

  on btn_autoDelete changed state do
  (
    if state == on then autoDelete = true else autoDelete = false    
  )
  
  on barSlide tick do
  (
    currentColor = theProgressbar.color
    cR = currentColor.r
    cG = currentColor.g
    cB = currentColor.b
    nextStepR = (progressBarColor[1] - cR) / 9
    nextStepG = (progressBarColor[2] - cG) / 9
    nextStepB = (progressBarColor[3] - cB) / 9
    theProgressbar.color.r += nextStepR
    theProgressbar.color.g+= nextStepG
    theProgressbar.color.b += nextStepB
    
    currentVal = theProgressbar.value + 0.0
    nextStep = (barTarget - currentVal) / 9.0
    if nextStep < 1 and nextStep > 0 then nextStep = 1.0  
    theProgressbar.value += nextStep
    if currentVal == barTarget then 
    (
      barSlide.active = false
    )    
  )
  
  function setProgress theValue =
  (      
    theProgressbar.color = [255, 255, 255]
    barTarget = theValue
    barSlide.active = true
  )
  

--// Scale Function for XYZ Controller
  fn checkSetXYZ theObject =
  (    
    sCtrl = theObject.scale.controller as string
    if(sCtrl != "Controller:ScaleXYZ") then -- if controller type isn't xyz then assign it
    (  
      theController = ScaleXYZ()
      theObject.scale.controller = theController 
    )
  )
  
  
  function checkStates = -- a function that validates all of the checkboxes
  (
    stateSum = #(false, -- 1 xPos
              false, -- 2 yPos
              false, -- 3 zPos
              false, -- 4 xRot
              false, -- 5 yRot
              false, -- 6 zRot
              false, -- 7 xScale
              false, -- 8 yScale
              false, -- 9 zScale
              false, -- 10 Visibility  
              false -- 11 Modifiers
              )
    if (chkxPos.state) then if(userAnimatedObj.position.x_position.controller.keys.count >= 1) then stateSum[1] = true
    if (chkyPos.state) then if(userAnimatedObj.position.y_position.controller.keys.count >= 1) then stateSum[2] = true
    if (chkzPos.state) then if(userAnimatedObj.position.z_position.controller.keys.count >= 1) then stateSum[3] = true
    if (chkxRot.state) then if(userAnimatedObj.rotation.x_rotation.controller.keys.count >= 1) then stateSum[4] = true
    if (chkyRot.state) then if(userAnimatedObj.rotation.y_rotation.controller.keys.count >= 1) then stateSum[5] = true
    if (chkzRot.state) then if(userAnimatedObj.rotation.z_rotation.controller.keys.count >= 1) then stateSum[6] = true
    if (chkxScale.state) then (
      checkSetXYZ userAnimatedObj
      if(userAnimatedObj.scale.x_scale.controller.keys.count >= 1) then stateSum[7] = true 
    )
    if (chkyScale.state) then (
      checkSetXYZ userAnimatedObj
      if(userAnimatedObj.scale.y_scale.controller.keys.count >= 1) then stateSum[8] = true 
    )
    if (chkzScale.state) then (
      checkSetXYZ userAnimatedObj
      if(userAnimatedObj.scale.z_scale.controller.keys.count >= 1) then stateSum[9] = true 
    )
    if (chkVisibility.state) then (      
      try ( 
        if (userAnimatedObj.visibility.controller.keys.count >= 1) then stateSum[10] = true 
      ) catch (
    
      )
    )
    if (chkModifier.state) then (
      stateSum[11] = true
      /*
      userSel = getCurrentSelection ()
      for i = 1 to userAnimatedObj.modifiers.count do
      (
        for j = 1 to userSel.count do 
        (
          if validModifier userSel[j] userAnimatedObj.modifiers[i] then
          (            
            
          )
          else stateSum[11] = false
        )
      )
      */
    )
    return stateSum
  )
  
  function countActive theArray =
  (
    count = 0
    for i in theArray do
    (
      if(i) then count += 1
    )
    return count
  )
  
--//Transfer Animation Button  
   on roBasic open do 
  (
  KTbtnImage=KeyTransferAnimationButton()
  btn_transferAnimation.images = #(KTbtnImage, KTbtnImage, 1,1,1,1,1 )
  
  SettingsLogo=DeleteSettingsLogo()
  btn_deleteSettings.images = #(SettingsLogo, SettingsLogo, 1,1,1,1,1)
  ) 
  
--// Delete Existing Keys
  on btn_deleteKeys pressed do
  (    
    deleteAction()
  )
  
--// Changes the Scale Controller from the default "Bezier Scale" to "Scale XYZ"
--// Scale XYZ allows us to transfer scale keys from the individual scale tracks.
  on btn_scaleXYZ pressed do
  for i in selection do
  (
  theController = ScaleXYZ()
  i.scale.controller = theController
  )

--// Replaces the button text with the users selection
  on btn_pickBox picked obj do
  (
    if obj != undefined then
    (
      btn_pickBox.text = obj.name
      userAnimatedObj = obj
      
      if(userProxObj == undefined) then
      (
        roTracksStagger.btn_proxBox.text = obj.name
        userProxObj = obj
      )
    )
  )
  
--// Transform Relation Type
  on rdooffsetType changed stat do
  (
    if(stat == 1) then ( offsetType = "relative"  ) else ( offsetType = "absolute" )
  )  

--// Transfer Animation Button
  on btn_transferAnimation pressed do
(
  if(userAnimatedObj == undefined) then(      
    MessageBox "Pick an animated object"
    return()
  )
  
  if(userOrderBy == "proximity") then (
    if(userProxObj == undefined) then(      
      MessageBox "Pick a proximity object"
      return()
    )    
  )  
  
  userSel = getCurrentSelection ()
  modCheck = false
  stateActive = checkStates()
  activeCount = countActive stateActive

  progressMade = 0.0
  progressTotal = (userSel.count * 2) * 1.0
  theProgressbar.color = progressBarColor
  if activeCount >= 1 then modCheck = true
  objectIntensity = for i=1 to userSel.count collect (random roKeyParams.spnIntensityMin.value roKeyParams.spnIntensityMax.value )  

  if activeCount >= 1 then (
    if autoDelete then deleteAction()
    for i = 1 to userSel.count do --// Copies the Keys
    (
      if(stateActive[1]) then --// The action scripts for x-Position  
      (
        origin = userSel[i].pos.x
        offset = origin - userAnimatedObj.position.x_position.controller.keys[1].value
        for k = 1 to userAnimatedObj.position.x_position.controller.keys.count do
        (
          appendKey userSel[i].position.x_position.controller.keys userAnimatedObj.position.x_position.controller.keys[k]          
          if(roKeyParams.chkSkipFirst.state) then (
            if(index != 1) then ( userSel[i].position.x_position.controller.keys[k].value *= objectIntensity[i] )  
          ) else (
            userSel[i].position.x_position.controller.keys[k].value *= objectIntensity[i]
          )                
          if(offsetType == "relative") then ( userSel[i].position.x_position.controller.keys[k].value += offset )
        )
      )
      
      if(stateActive[2]) then --// The action scripts for y-Position  
      (
        origin = userSel[i].pos.y
        offset = origin - userAnimatedObj.position.y_position.controller.keys[1].value
        for k = 1 to userAnimatedObj.position.y_position.controller.keys.count do
        (
          appendKey userSel[i].position.y_position.controller.keys userAnimatedObj.position.y_position.controller.keys[k]          
          if(roKeyParams.chkSkipFirst.state) then (
            if(indey != 1) then ( userSel[i].position.y_position.controller.keys[k].value *= objectIntensity[i] )  
          ) else (
            userSel[i].position.y_position.controller.keys[k].value *= objectIntensity[i]
          )                
          if(offsetType == "relative") then ( userSel[i].position.y_position.controller.keys[k].value += offset )
        )
      )      
      if(stateActive[3]) then --// The action scripts for Z-Position  
      (
        origin = userSel[i].pos.z
        offset = origin - userAnimatedObj.position.z_position.controller.keys[1].value
        for k = 1 to userAnimatedObj.position.z_position.controller.keys.count do
        (
          appendKey userSel[i].position.z_position.controller.keys userAnimatedObj.position.z_position.controller.keys[k]          
          if(roKeyParams.chkSkipFirst.state) then (
            if(index != 1) then ( userSel[i].position.z_position.controller.keys[k].value *= objectIntensity[i] )  
          ) else (
            userSel[i].position.z_position.controller.keys[k].value *= objectIntensity[i]
          )                
          if(offsetType == "relative") then ( userSel[i].position.z_position.controller.keys[k].value += offset )
        )
      )
      if(stateActive[4]) then --// The action scripts for X-Rotation
      (
        for k = 1 to userAnimatedObj.rotation.x_rotation.controller.keys.count do appendKey userSel[i].rotation.x_rotation.controller.keys userAnimatedObj.rotation.x_rotation.controller.keys[k]  
      )
      if(stateActive[5]) then --// The action scripts for Y-Rotation
      (
        for k = 1 to userAnimatedObj.rotation.y_rotation.controller.keys.count do appendKey userSel[i].rotation.y_rotation.controller.keys userAnimatedObj.rotation.y_rotation.controller.keys[k]
      )
      if(stateActive[6]) then --// The action scripts for Z-Rotation
      (
        for k = 1 to userAnimatedObj.rotation.z_rotation.controller.keys.count do appendKey userSel[i].rotation.z_rotation.controller.keys userAnimatedObj.rotation.z_rotation.controller.keys[k]
      )
      if(stateActive[7]) then --// The action scripts for X-Scale
      (
        checkSetXYZ userSel[i]
        for k = 1 to userAnimatedObj.scale.x_scale.controller.keys.count do appendKey userSel[i].scale.x_scale.controller.keys userAnimatedObj.scale.x_scale.controller.keys[k]
      )
      if(stateActive[8]) then --// The action scripts for Y-Scale
      (
        checkSetXYZ userSel[i]
        for k = 1 to userAnimatedObj.scale.y_scale.controller.keys.count do appendKey userSel[i].scale.y_scale.controller.keys userAnimatedObj.scale.y_scale.controller.keys[k]  
      )
      if(stateActive[9]) then --// The action scripts for Z-Scale
      (
        checkSetXYZ userSel[i]
        for k = 1 to userAnimatedObj.scale.z_scale.controller.keys.count do appendKey userSel[i].scale.z_scale.controller.keys userAnimatedObj.scale.z_scale.controller.keys[k]  
      )
      if(stateActive[10]) then --// The action scripts for X-Rotation
      (
            sCtrl = userAnimatedObj.visibility.controller as string
            case of
            (
              (sCtrl == "Controller:Bezier_Float"): (userSel[i].Visibility = bezier_float (); userSel[i].Visibility.controller = bezier_float ())
              (sCtrl == "Controller:Linear_Float"): (userSel[i].Visibility  = linear_float (); userSel[i].Visibility.controller = linear_float ())
            )  
            for k = 1 to userAnimatedObj.visibility.controller.keys.count do
            (
              appendKey userSel[i].visibility.controller.keys userAnimatedObj.visibility.controller.keys[k]
            )
      )
      if(stateActive[11]) then --// The action scripts for Modifiers
      (        
        targetModList = #()
        for j = 1 to userSel[i].modifiers.count do -- populate list of modifiers already on target object
        (
          targetModList[j] = userSel[i].modifiers[j] as string
        )    
        
        for k = 1 to userAnimatedObj.modifiers.count do
        (    
          theModifier =  copy userAnimatedObj.modifiers[k]
          theModifier.name = userAnimatedObj.modifiers[k].name + " KT." + k as string
          modName= theModifier as string
          foundIndex = findItem targetModList modName  
          if foundIndex == 0 then ( -- if modifier doesn't exist in target object stack then add it
            if validModifier userSel[i] theModifier then
            (            
              addModifier userSel[i] theModifier before:(k-1)
            )
          ) else (  -- if modifier does exist, update it with new settings
            deleteModifier userSel[i] foundIndex
            addModifier userSel[i] theModifier before:(foundIndex-1)
          )
        )          
      )
      moveKeys userSel[i] (random roKeyParams.spnKeysMin.value roKeyParams.spnKeysMax.value)
      progressMade += 1
      currentProgress = (progressMade / progressTotal) * 100.0
      theProgressbar.value = currentProgress
    )  

    if(modCheck == true) then(
      staggerIndex = 0
      userSel = getCurrentSelection ()
      if(reverseKeys) then ( userSel = reverseArray userSel )
      if(userOrderBy == "selection") then(
        for s in userSel do
        (
          if (staggerEasing == "linear") then ( targetOffset = (staggerIndex * roTracksStagger.spnStagger.value) + roTracksStagger.spnStagger.value )
          if (staggerEasing == "cubicIn") then ( targetOffset = easeInCubic staggerIndex 0.0 roTracksStagger.spnDuration.value (userSel.count + 0.0) )
          if (staggerEasing == "cubicOut") then ( targetOffset = easeOutCubic staggerIndex 0.0 roTracksStagger.spnDuration.value (userSel.count + 0.0) )
          if (staggerEasing == "cubicInOut") then ( targetOffset = easeInOutCubic staggerIndex 0.0 roTracksStagger.spnDuration.value (userSel.count + 0.0) )
          if (staggerEasing == "circIn") then ( targetOffset = easeInCirc staggerIndex 0.0 roTracksStagger.spnDuration.value (userSel.count + 0.0) )
          if (staggerEasing == "circOut") then ( targetOffset = easeOutCirc staggerIndex 0.0 roTracksStagger.spnDuration.value (userSel.count + 0.0) )
          if (staggerEasing == "circInOut") then ( targetOffset = easeInOutCirc staggerIndex 0.0 roTracksStagger.spnDuration.value (userSel.count + 0.0) )
          moveKeys s (targetOffset)
          staggerIndex += 1
          progressMade += 1
          currentProgress = (progressMade / progressTotal) * 100.0
          theProgressbar.value = currentProgress
        )
      )
      if(userOrderBy == "proximity") then (
        
        bufferedObjs = case sortType of
        (
          "radial":  radialSort userSel userProxObj
          "linear":  linearSort userSel userProxObj
          default: radialSort userSel userProxObj
        )
        
        userSelGroups = groupByThreshold bufferedObjs roTracksStagger.spnGroupTolerance.value
        if(reverseKeys) then ( userSelGroups = reverseArray userSelGroups )      
        --userSelGroups = proximitySort userSel userProxObj roTracksStagger.spnGroupTolerance.value      
        
        groupCursor = 1
        for s in userSelGroups do
        (
          for i in s do
          (
            if (staggerEasing == "linear") then ( targetOffset = (groupCursor * roTracksStagger.spnStagger.value) )          
            if (staggerEasing == "cubicIn") then ( targetOffset = easeInCubic groupCursor 0.0 roTracksStagger.spnDuration.value (userSelGroups.count + 0.0) )
            if (staggerEasing == "cubicOut") then ( targetOffset = easeOutCubic groupCursor 0.0 roTracksStagger.spnDuration.value (userSelGroups.count + 0.0) )
            if (staggerEasing == "cubicInOut") then ( targetOffset = easeInOutCubic groupCursor 0.0 roTracksStagger.spnDuration.value (userSelGroups.count + 0.0) )
            if (staggerEasing == "circIn") then ( targetOffset = easeInCirc groupCursor 0.0 roTracksStagger.spnDuration.value (userSelGroups.count + 0.0) )
            if (staggerEasing == "circOut") then ( targetOffset = easeOutCirc groupCursor 0.0 roTracksStagger.spnDuration.value (userSelGroups.count + 0.0) )
            if (staggerEasing == "circInOut") then ( targetOffset = easeInOutCirc groupCursor 0.0 roTracksStagger.spnDuration.value (userSelGroups.count + 0.0) )
            moveKeys i (targetOffset)
            progressMade += 1
            currentProgress = (progressMade / progressTotal) * 100.0
            theProgressbar.value = currentProgress
          )    
          groupCursor += 1
        )
      )
      try ( setProgress 0 ) catch ( theProgressbar.value = 0)
    )
  ) else ( MessageBox "Nothing to copy." )
)  

  on roBasic rolledUp state do
  (
  if (state) then
  rfKeyTransfer.size.y += roBasic.height
  else
  rfKeyTransfer.size.y -= roBasic.height
  )
  
)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
--//Key Parameters
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
rollout roKeyParams "Key Parameters"
(
  group "Key Offset Variation"
  (
  label lbOffsetMin "Min:" width:20 height:16 across: 4 offset:[-11,0] 
  spinner spnKeysMin "" width:50 height:16 range:[-9999,9999,KeysMin] offset:[-21,0] tooltip:"Is the value used for the minimum offset of the keys in the timeline."
  label lbOffsetMax "Max:" width:22 height:16 offset:[-3,0]
  spinner spnKeysMax "" width:50 height:16 range:[-9999,9999,KeysMax] offset:[-10,0] tooltip:"Is the value used for the maximum offset of the keys in the timeline."
  )
  
   group "Key Position Variation"
  (
  label lbIntensity "Pos. Intensity:" width:100 height:16 across: 2 offset:[8,0] 
  checkbox chkSkipFirst "Skip 1st Key" offset:[0,0] checked: true
  label lbIntensityMin "Min:" width:20 height:16 across: 4 offset:[-11,0] 
  spinner spnIntensityMin "" width:50 height:16 range:[-9999,9999,IntensityMin] offset:[-21,0] tooltip:"Is the value used for the minimum offset of the keys in the timeline."
  label lbIntensityMax "Max:" width:22 height:16 offset:[-3,0]
  spinner spnIntensityMax "" width:50 height:16 range:[-9999,9999,IntensityMax] offset:[-10,0] tooltip:"Is the value used for the maximum offset of the keys in the timeline."  
  ) 

  on chkSkipFirst changed theState do
  (
    if(theState == false) then ( MessageBox "WARNING: By unchecking this option your objects will be irreversibly displaced in result of randomization.\nIt is recommended that you save a copy of your scene before you transfer keys! Just sayin'." )
  )
  
  on roKeyParams rolledUp state do
  (
  if (state) then
  rfKeyTransfer.size.y += roKeyParams.height
  else
  rfKeyTransfer.size.y -= roKeyParams.height
  )
)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
--//Advanced Parameters
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
rollout roTracksStagger "Tracks Stagger"
(

  group "Key Stagger"
  (
  label lbstaggerOffset "Delay:" width:40 height:16 across: 2 offset:[-20,0]
  spinner spnStagger "" width:50 height:16 range:[-9999,9999,0] offset:[0,0] 
  label lbDuration "Total Duration:" width:100 height:16 across: 2 offset:[10,0] enabled: false
  spinner spnDuration "" width:50 height:16 range:[0,9999,50] offset:[0,0] enabled: false 
  dropDownList dlEasingType "Offset Type:" width:122 height:40 items:#("Fixed", "Cubic In", "Cubic Out", "Cubic In/Out", "Circ In", "Circ Out", "Circ In/Out") offset:[-1,-5]
  radioButtons rdostaggerType "Order by:" width:88 height:46 labels:#("Selection", "Proximity to") offset:[-35,-2]
  pickButton btn_proxBox "Pick Object" width:160 height:24 tooltip:"Pick Proximity Object" enabled:false offset:[0,-15]
  radioButtons rdoSortType "" width:80 height:50 labels:#("Radial", "Linear") columns:2 across:2 offset:[11,3] enabled: false
  dropDownList dlLinearAxis "" width:60 height:40 items:#("X Axis", "Y Axis", "Z Axis") selection:3 offset:[23,0] enabled: false
  label lbGroupTolerance "Group If Between :" width:100 height:16 across: 2 offset:[7,-30] enabled: false
  spinner spnGroupTolerance "" width:50 height:16 range:[0,9999,50] offset:[0,-30]  enabled: false
  checkbutton ckbtnPreview "Preview Groups" width:160 height:24 enabled:false
  checkbox chkReverse "Reverse Order" offset:[0,0] checked: false
    
  )

  on spnGroupTolerance buttonDown do
  (
    
  )

  on spnGroupTolerance buttonup do
  (
    
  )
  
  on spnGroupTolerance changed val do
  (
    if(previewEnabled) then
    (    
      userSelGroups = groupByThreshold bufferedObjs roTracksStagger.spnGroupTolerance.value
      if(reverseKeys) then ( userSelGroups = reverseArray userSelGroups)
      ckbtnPreview.caption = ((userSelGroups.count as string) +  " Groups")  
      colorGroups userSelGroups
    )
  )
  
  on ckbtnPreview changed st do 
  (
    if(userProxObj == undefined) then( --// If there isn't a proximity object  
      MessageBox "Pick a proximity object" --//Set shaded display to object's wireframe
      ckbtnPreview.state = false
      return()
    ) else 
    (  --// If there is a proximity object
      if st ==true then --// Button state checked TRUE
      (          
        previewEnabled = true
        userSel = getCurrentSelection ()
        displayColor.shaded = #object
        cacheWireMaterials userSel
        
        if userSel.count !=0 then
        (          
          bufferedObjs = case sortType of
          (
            "radial":  radialSort userSel userProxObj
            "linear":  linearSort userSel userProxObj
            default: radialSort userSel userProxObj
          )
          userSelGroups = groupByThreshold bufferedObjs roTracksStagger.spnGroupTolerance.value
          if(reverseKeys) then ( userSelGroups = reverseArray userSelGroups)
          colorGroups userSelGroups
          ckbtnPreview.caption = ((userSelGroups.count as string) +  " Groups")  
        )
      )
      else --// Button state checked FALSE
      (
        previewEnabled = false
        displayColor.shaded = #material --//Set shaded display to object's material
        restoreWireMaterials()
        ckbtnPreview.caption = "Preview Groups"
      )
    )
  )    
  
  
  
  on chkReverse changed theState do
  (
    if(theState) then 
    (  
      reverseKeys = true
      
      if(previewEnabled) then
      (    
        userSelGroups = groupByThreshold bufferedObjs roTracksStagger.spnGroupTolerance.value
        userSelGroups = reverseArray userSelGroups
        colorGroups userSelGroups
      )        
      
    ) else (
      reverseKeys = false      
      if(previewEnabled) then
      (        
        userSelGroups = groupByThreshold bufferedObjs roTracksStagger.spnGroupTolerance.value
        colorGroups userSelGroups
      )
    )
    
  )
  
  
  --// Replaces the button text with the users selection
  on btn_proxBox picked obj do
  (
    if obj != undefined then
    (
      btn_proxBox.text = obj.name
      userProxObj = obj
      
      if(previewEnabled) then
      (    
        userSel = getCurrentSelection ()
        if userSel.count !=0 then
        (          
          restoreWireMaterials()
          userSel = getCurrentSelection ()        
          cacheWireMaterials userSel
          bufferedObjs = case sortType of
          (
            "radial":  radialSort userSel userProxObj
            "linear":  linearSort userSel userProxObj
            default: radialSort userSel userProxObj
          )
          userSelGroups = groupByThreshold bufferedObjs roTracksStagger.spnGroupTolerance.value
          if(reverseKeys) then ( userSelGroups = reverseArray userSelGroups)
          colorGroups userSelGroups
          ckbtnPreview.caption = ((userSelGroups.count as string) +  " Groups")  
        )
      )
      
    )
  )
  
  on rdostaggerType changed stat do
  (
    if(stat == 1) then (
      btn_proxBox.enabled = lbGroupTolerance.enabled = spnGroupTolerance.enabled = ckbtnPreview.enabled = rdoSortType.enabled = false 
      if(sortType == "linear") then dlLinearAxis.enabled = false 
      userOrderBy = "selection"
    )
    if(stat == 2) then (
      btn_proxBox.enabled = lbGroupTolerance.enabled = spnGroupTolerance.enabled = ckbtnPreview.enabled = rdoSortType.enabled = true
      if(sortType == "linear") then dlLinearAxis.enabled = true 
      userOrderBy = "proximity"
    )
    --print rdostaggerType.state
  )
  
  on rdoSortType changed stat do
  (
    if(stat == 1) then (
      dlLinearAxis.enabled = false 
      sortType = "radial"
    )
    if(stat == 2) then (
      dlLinearAxis.enabled = true 
      sortType = "linear"
    )
    if(previewEnabled) then
    (    
      userSel = getCurrentSelection ()
      if userSel.count !=0 then
      (          
        restoreWireMaterials()
        userSel = getCurrentSelection ()        
        cacheWireMaterials userSel
        bufferedObjs = case sortType of
        (
          "radial":  radialSort userSel userProxObj
          "linear":  linearSort userSel userProxObj
          default: radialSort userSel userProxObj
        )
        userSelGroups = groupByThreshold bufferedObjs roTracksStagger.spnGroupTolerance.value
        if(reverseKeys) then ( userSelGroups = reverseArray userSelGroups)
        colorGroups userSelGroups
        ckbtnPreview.caption = ((userSelGroups.count as string) +  " Groups")  
      )
    )
    --print rdostaggerType.state
  )

  on dlLinearAxis selected sel do
  (
    if(sel == 1) then (
      linearAxis = "X"
    )
    if(sel == 2) then (
      linearAxis = "Y"
    )
    if(sel == 3) then (
      linearAxis = "Z"
    )
    if(previewEnabled) then
    (    
      userSel = getCurrentSelection ()
      if userSel.count !=0 then
      (          
        restoreWireMaterials()
        userSel = getCurrentSelection ()        
        cacheWireMaterials userSel
        bufferedObjs = case sortType of
        (
          "radial":  radialSort userSel userProxObj
          "linear":  linearSort userSel userProxObj
          default: radialSort userSel userProxObj
        )
        userSelGroups = groupByThreshold bufferedObjs roTracksStagger.spnGroupTolerance.value
        if(reverseKeys) then ( userSelGroups = reverseArray userSelGroups)
        colorGroups userSelGroups
        ckbtnPreview.caption = ((userSelGroups.count as string) +  " Groups")  
      )
    )
  )    
  
  on dlEasingType selected sel do
  (
    if(sel == 1) then (
      lbstaggerOffset.enabled = spnStagger.enabled = true 
      lbDuration.enabled = spnDuration.enabled = false
      staggerEasing = "linear"
    )
    if(sel == 2) then (
      lbstaggerOffset.enabled = spnStagger.enabled = false 
      lbDuration.enabled = spnDuration.enabled = true
      staggerEasing = "cubicIn"
    )
    if(sel == 3) then (
      lbstaggerOffset.enabled = spnStagger.enabled = false 
      lbDuration.enabled = spnDuration.enabled = true
      staggerEasing = "cubicOut"
    )    
    if(sel == 4) then (
      lbstaggerOffset.enabled = spnStagger.enabled = false 
      lbDuration.enabled = spnDuration.enabled = true
      staggerEasing = "cubicInOut"
    )
    if(sel == 5) then (
      lbstaggerOffset.enabled = spnStagger.enabled = false 
      lbDuration.enabled = spnDuration.enabled = true
      staggerEasing = "circIn"
    )
    if(sel == 6) then (
      lbstaggerOffset.enabled = spnStagger.enabled = false 
      lbDuration.enabled = spnDuration.enabled = true
      staggerEasing = "circOut"
    )
    if(sel == 7) then (
      lbstaggerOffset.enabled = spnStagger.enabled = false 
      lbDuration.enabled = spnDuration.enabled = true
      staggerEasing = "circInOut"
    )
    --print rdostaggerType.state



  )
  on roTracksStagger rolledUp state do
  (
  if (state) then
  rfKeyTransfer.size.y += roTracksStagger.height
  else
  rfKeyTransfer.size.y -= roTracksStagger.height
  )
)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
--//Track Wiggler
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
rollout roTracksWiggler "Tracks Wiggler"
(
  groupbox gpAllTracks "      All Animated Tracks" pos:[5,5] width:170 height:62
  checkbox ckbtnAllTracks "" width:16 pos:[13,5] checked:true
    checkbox ckbtnPositionTrack "Position" across:2 checked:true enabled: false
    checkbox ckbtnRotationTrack "Rotation" checked:true enabled: false
    checkbox ckbtnScaleTrack "Scale" across:2 checked:true enabled: false
    checkbox ckbtnVisibilityTrack "Visibility" checked:true enabled: false
  groupbox gpOffsetTracks "" width:170 height:42 pos:[5,60]
    button btnApplyTracksWiggler "< Apply >" width:50 height:24 offset:[0,-35]
    spinner spnTimBack fieldwidth:40 range:[-9999999,9999999,-6] type:#float scale:0.1 offset:[-108,-25]
    spinner spnTimeForward fieldwidth:40 range:[0,9999999,6] type:#float scale:0.1 offset:[1,-20]

--//Checkbox Enable Actions
  on ckbtnAllTracks changed theState do
  (
    if theState == true then
    (
    ckbtnPositionTrack.enabled = ckbtnRotationTrack.enabled = ckbtnScaleTrack.enabled = ckbtnVisibilityTrack.enabled = false
    ckbtnPositionTrack.checked = ckbtnRotationTrack.checked = ckbtnScaleTrack.checked = ckbtnVisibilityTrack.checked = true  
    )
    else
    (
    ckbtnPositionTrack.enabled = ckbtnRotationTrack.enabled = ckbtnScaleTrack.enabled = ckbtnVisibilityTrack.enabled = true  
    )
  )
  
--//Apply Action
  on btnApplyTracksWiggler pressed do
  (
    userSel = getCurrentSelection ()
    moveval_collection = #() --// Creates an array
    moveval_collection = for i=1 to userSel.count collect (random spnTimBack.value spnTimeForward.value) --// Populates it with random values
    
    if (ckbtnAllTracks.state) then 
    (
      for i = 1 to userSel.count do --\\ Apply seed values from array
      (  
      try (movekeys userSel[i].pos.track (moveval_collection[i])) catch ()
      try (movekeys userSel[i].scale.track (moveval_collection[i])) catch ()
      try (movekeys userSel[i].rotation.track (moveval_collection[i])) catch ()
      try (movekeys userSel[i].visibility.track (moveval_collection[i])) catch ()
      )
    )
    else
    (
      if (ckbtnPositionTrack.state) then 
      (
        for i = 1 to userSel.count do
        (  
        try (movekeys userSel[i].pos.track (moveval_collection[i])) catch ()
        )
      )
      if (ckbtnRotationTrack.state) then 
      (
        for i = 1 to userSel.count do
        (  
        try (movekeys userSel[i].scale.track (moveval_collection[i])) catch ()
        )
      )
      if (ckbtnScaleTrack.state) then 
      (
        for i = 1 to userSel.count do
        (  
        try (movekeys userSel[i].rotation.track (moveval_collection[i])) catch ()
        )
      )
      if (ckbtnVisibilityTrack.state) then 
      (
        for i = 1 to userSel.count do
        (  
        try (movekeys userSel[i].visibility.track (moveval_collection[i])) catch ()
        )
      )
    )
  )

--//Spinner Actions
  on spnTimBack changed val do TimeBack = val
  on spnTimeForward changed val do TimeForward = val
    
  on roTracksWiggler rolledUp state do
  (
  if (state) then
  rfKeyTransfer.size.y += roTracksWiggler.height
  else
  rfKeyTransfer.size.y -= roTracksWiggler.height
  )
)


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
--//About
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
rollout roAbout "About"
(
  
  button btn_instructions "Instructions" width:83 height:16 across: 2 offset:[-6,0]
  button btn_credits "Credits" width:83 height:16 across: 2 offset:[6,0]
  
  --// Instructions
  on btn_instructions pressed do
  (
    rollout rlInstructions "Instructions"
    (
    imgTag itKTLogo style:#bmp_center bitmap:(KeyTransferLogo()) transparent:(color 255 255 255) align:#center offset:[0,14]
    Label Label0 "- Key Transfer -" align:#center offset:[0,14]
    Label Label1 "1. Pick animated reference object." align:#left offset:[14,14]
    Label Label2 "2. Set desired varions." align:#left offset:[14,0]
    Label Label3 "3. Select objects you wish to animate." align:#left offset:[14,0]
    Label Label4 "4. Choose axis's to transfer to." align:#left offset:[14,0]
    Label Label5 "5. Click Transfer Animation button." align:#left offset:[14,0]
    )
    createDialog rlInstructions 250 225
  )
  
--// Credits
  on btn_credits pressed do
  (
    rollout rlCredits "Credits"
    (
    imgTag itKTLogo style:#bmp_center bitmap:(KeyTransferLogo()) transparent:(color 255 255 255) align:#center offset:[0,14]
    HyperLink KeyTransferSite "- Key Transfer -"  address:"http://www.scriptspot.com/3ds-max/scripts/key-transfer" color:black hovercolor:blue visitedcolor:black align:#center offset:[0,14]
    Label LabelVersion "Version 1.06 - 2010" align:#center
    Label LabelAuthor "Created by John A. Martini" align:#center offset:[0,14]
    HyperLink website "http://www.JokerMartini.com"  address:"http://www.JokerMartini.com" color:black hovercolor:blue visitedcolor:black align:#center
    Label LabelAuthor2 "and Andru J. Phoenix" align:#center offset:[0,14]
    HyperLink website2 "http://www.bigseksi.com"  address:"http://www.bigseksi.com" color:black hovercolor:blue visitedcolor:black align:#center    
    )
    createDialog rlCredits 250 225    
  )
  
  on roAbout rolledUp state do
  (
  if (state) then
  rfKeyTransfer.size.y += roAbout.height
  else
  rfKeyTransfer.size.y -= roAbout.height
  )
)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
if (rfKeyTransfer != undefined) then CloseRolloutFloater rfKeyTransfer
floaterWidth = 194
floaterHeight = 1005
rfKeyTransfer = newRolloutFloater "Key Transfer v1.06" floaterWidth floaterHeight 300 200 

addRollout roTracksStagger rfKeyTransfer
addRollout roKeyParams rfKeyTransfer
addRollout roTracksWiggler rfKeyTransfer
addRollout roBasic rfKeyTransfer
addRollout roAbout rfKeyTransfer

roTracksStagger.open = false
roKeyParams.open = false
roTracksWiggler.open = false
roBasic.open = true
roAbout.open = false

)
