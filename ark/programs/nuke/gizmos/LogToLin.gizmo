#! C:/Program Files/Nuke10.0v4/nuke-10.0.4.dll -nx
version 10.0 v4
Gizmo {
 inputs 2
 onCreate "import os\nn = nuke.thisNode()\n\nif n\['isInit'].value() == 0:\n\tlogRef = \[float(s) for s in os.environ.get(\"DN_LOGLIN_LOGREF\",\"445\").split(\" \")] \n\tif len(logRef) == 3:\n\t\tfor i in range(0, 3):\n\t\t\tc = 2 - i\n\t\t\tn\['logReference'].setValue(logRef\[c],c)\n\telif len(logRef) == 1:\n\t\tn\['logReference'].setValue(logRef\[0])\n\t\n\tlinRef = \[float(s) for s in os.environ.get(\"DN_LOGLIN_LINREF\",\"0.18\").split(\" \")]\n\tif len(linRef) == 3:\n\t\tfor i in range(0, 3):\n\t\t\tc = 2 - i\n\t\t\tn\['linReference'].setValue(linRef\[c],c)\n\telif len(linRef) == 1:\n\t\tn\['linReference'].setValue(linRef\[0])\n\t\n\tnGamma = \[float(s) for s in os.environ.get(\"DN_LOGLIN_NGAMMA\",\"0.6\").split(\" \")]\n\tif len(nGamma) == 3:\n\t\tfor i in range(0, 3):\n\t\t\tc = 2 - i\n\t\t\tn\['negativeGamma'].setValue(nGamma\[c],c)\n\telif len(nGamma) == 1:\n\t\tn\['negativeGamma'].setValue(nGamma\[0])\n\t\n\tbLevel = \[float(s) for s in os.environ.get(\"DN_LOGLIN_BLACKLEVEL\",\"0.0\").split(\" \")]\n\tif len(bLevel) == 3:\n\t\tfor i in range(0, 3):\n\t\t\tc = 2 - i\n\t\t\tn\['blackLevel'].setValue(bLevel\[c],c)\n\telif len(bLevel) == 1:\n\t\tn\['blackLevel'].setValue(bLevel\[0])\n\t\n\tdPerCV = \[float(s) for s in os.environ.get(\"DN_LOGLIN_DENSPERCV\",\"0.002\").split(\" \")]\n\tif len(dPerCV) == 3:\n\t\tfor i in range(0, 3):\n\t\t\tc = 2 - i\n\t\t\tn\['densPerCV'].setValue(dPerCV\[c],c)\n\telif len(dPerCV) == 1:\n\t\tn\['densPerCV'].setValue(dPerCV\[0])\n\t\n\tif n\['logReference'].value(0) == n\['logReference'].value(1) == n\['logReference'].value(2):\n\t\tn\['logReference'].setValue(n\['logReference'].value(0))\n\t\n\tif n\['linReference'].value(0) == n\['linReference'].value(1) == n\['linReference'].value(2):\n\t\tn\['linReference'].setValue(n\['linReference'].value(0))\n\t\n\tif n\['negativeGamma'].value(0) == n\['negativeGamma'].value(1) == n\['negativeGamma'].value(2):\n\t\tn\['negativeGamma'].setValue(n\['negativeGamma'].value(0))\n\t\n\tif n\['blackLevel'].value(0) == n\['blackLevel'].value(1) == n\['blackLevel'].value(2):\n\t\tn\['blackLevel'].setValue(n\['blackLevel'].value(0))\n\t\n\tif n\['densPerCV'].value(0) == n\['densPerCV'].value(1) == n\['densPerCV'].value(2):\n\t\tn\['densPerCV'].setValue(n\['densPerCV'].value(0))\n\t\n\tn\['isInit'].setValue(1)\n"
 knobChanged "import math\nn = nuke.thisNode()\nk = nuke.thisKnob()\n\nif n\['isInit'].value() == 1:\n\tif k.name() in \[\"isInit\", \"legalize\", \"logReference\", \"linReference\", \"negativeGamma\", \"blackLevel\", \"densPerCV\"]:\n\t\tif n\['logReference'].value(0) == n\['logReference'].value(1) == n\['logReference'].value(2) and n\['linReference'].value(0) == n\['linReference'].value(1) == n\['linReference'].value(2) and n\['negativeGamma'].value(0) == n\['negativeGamma'].value(1) == n\['negativeGamma'].value(2) and n\['blackLevel'].value(0) == n\['blackLevel'].value(1) == n\['blackLevel'].value(2) and n\['densPerCV'].value(0) == n\['densPerCV'].value(1) == n\['densPerCV'].value(2):\n\t\t\tif n\['logReference'].value(0) == 445 and n\['linReference'].value(0) == 0.18 and n\['negativeGamma'].value(0) == 0.6 and n\['blackLevel'].value(0) == 0 and n\['densPerCV'].value(0) == 0.002:\n\t\t\t\tn\['preset'].setValue(\"PLogLin\")\n\t\t\telif n\['logReference'].value(0) == 394 and n\['linReference'].value(0) == 0.18 and n\['negativeGamma'].value(0) == 0.5064 and n\['blackLevel'].value(0) == 0.00947 and n\['densPerCV'].value(0) == 0.002:\n\t\t\t\tn\['preset'].setValue(\"AlexaV3LogC\")\n\t\t\telif n\['logReference'].value(0) == 460 and n\['linReference'].value(0) == 0.18 and n\['negativeGamma'].value(0) == 0.6 and n\['blackLevel'].value(0) == 0.0109 and n\['densPerCV'].value(0) == 0.002:\n\t\t\t\tn\['preset'].setValue(\"REDLogFilm\")\n\t\t\telif n\['logReference'].value(0) == 423 and n\['linReference'].value(0) == 0.179784 and n\['negativeGamma'].value(0) == 0.387937 and n\['blackLevel'].value(0) == 0.0 and n\['densPerCV'].value(0) == 0.002:\n\t\t\t\tn\['preset'].setValue(\"ACEScc\")\n\t\t\telif n\['logReference'].value(0) == 685 and n\['linReference'].value(0) == 1.0109155 and n\['negativeGamma'].value(0) == 0.6 and n\['blackLevel'].value(0) == 0.0109155 and n\['densPerCV'].value(0) == 0.002:\n\t\t\t\tn\['preset'].setValue(\"Cineon\")\n\t\t\telif n\['logReference'].value(0) == 445 and n\['linReference'].value(0) == 0.307 and n\['negativeGamma'].value(0) == 0.87778 and n\['blackLevel'].value(0) == 0.041 and n\['densPerCV'].value(0) == 0.002:\n\t\t\t\tn\['preset'].setValue(\"Panalog\")\n\t\t\telif n\['logReference'].value(0) == 445 and n\['linReference'].value(0) == 0.3243 and n\['negativeGamma'].value(0) == 0.8852 and n\['blackLevel'].value(0) == 0.037584 and n\['densPerCV'].value(0) == 0.002:\n\t\t\t\tn\['preset'].setValue(\"SLog\")\n\t\t\telif n\['logReference'].value(0) == 445 and n\['linReference'].value(0) == 0.4141 and n\['negativeGamma'].value(0) == 0.7586 and n\['blackLevel'].value(0) == 0.04798 and n\['densPerCV'].value(0) == 0.002:\n\t\t\t\tn\['preset'].setValue(\"SLog2\")\n\t\t\telif n\['logReference'].value(0) == 454 and n\['linReference'].value(0) == 0.5 and n\['negativeGamma'].value(0) == 0.933 and n\['blackLevel'].value(0) == 0.1 and n\['densPerCV'].value(0) == 0.002:\n\t\t\t\tn\['preset'].setValue(\"CanonLog\")\n\t\t\telif n\['logReference'].value(0) == 356 and n\['linReference'].value(0) == 0.18 and n\['negativeGamma'].value(0) == 0.6 and n\['blackLevel'].value(0) == 0 and n\['densPerCV'].value(0) == 0.0025:\n\t\t\t\tn\['preset'].setValue(\"PLogLinEDR\")\n\t\t\telif n\['logReference'].value(0) == 363 and n\['linReference'].value(0) == 0.18 and n\['negativeGamma'].value(0) == 0.875 and n\['blackLevel'].value(0) == 0.0316 and n\['densPerCV'].value(0) == 0.002:\n\t\t\t\tn\['preset'].setValue(\"BMDFilm\")\n\t\t\telif n\['logReference'].value(0) == 445 and n\['linReference'].value(0) == 0.18 and n\['negativeGamma'].value(0) == 0.72 and n\['blackLevel'].value(0) == 0.005 and n\['densPerCV'].value(0) == 0.002:\n\t\t\t\tn\['preset'].setValue(\"Cinestyle\")\n\t\t\telse:\n\t\t\t\tn\['preset'].setValue(\"Custom\")\n\t\telse:\n\t\t\tn\['preset'].setValue(\"Custom\")\n\t\t\n\t\tif n\['legalize'].value() == 1:\n\t\t\tfor i in range(0, 3):\n\t\t\t\tc = 2 - i\n\t\t\t\tstepSize   = 0.000001\n\t\t\t\tbreakPoint = stepSize\n\t\t\t\tlinRef = n\['linReference'].value(c)\n\t\t\t\tlogLef = n\['logReference'].value(c)\n\t\t\t\tnGamma = n\['negativeGamma'].value(c)\n\t\t\t\tdPerCV = n\['densPerCV'].value(c)\n\t\t\t\tslope      = (((( math.log10( breakPoint / linRef ) * nGamma ) / dPerCV ) + logLef) / 1023) / breakPoint\n\t\t\t\tprevSlope  = slope\n\t\t\t\tdone       = False\n\t\t\t\t\n\t\t\t\twhile( done == False ):\n\t\t\t\t\tslope = (((( math.log10( breakPoint / linRef ) * nGamma ) / dPerCV ) + logLef) / 1023) / breakPoint\n\t\t\t\t\n\t\t\t\t\tif( slope < prevSlope ):\n\t\t\t\t\t\tdone = True\n\t\t\t\t\t\tbreakPoint = breakPoint - stepSize\n\t\t\t\t\telif( breakPoint > 1 ):\n\t\t\t\t\t\tbreakPoint = 1\n\t\t\t\t\t\tdone = True\n\t\t\t\t\telse:\n\t\t\t\t\t\tprevSlope = slope\n\t\t\t\t\t\tbreakPoint = breakPoint + stepSize\n\t\t\t\t\n\t\t\t\tbreakPointLog = (((( math.log10( breakPoint / n\['linReference'].value(c) ) * n\['negativeGamma'].value(c) ) / n\['densPerCV'].value(c) ) + n\['logReference'].value(c)) / 1023)\n\t\t\t\t\n\t\t\t\tn\['lin2LogLegalBreakpoint'].setValue( breakPoint, c )\n\t\t\t\tn\['log2LinLegalBreakpoint'].setValue( breakPointLog, c )\n\t\t\t\t\n\t\t\t\tif breakPoint == 0:\n\t\t\t\t\tn\['lin2LogLegalSlope'].setValue( 0, c)\n\t\t\t\telse:\n\t\t\t\t\tn\['lin2LogLegalSlope'].setValue( breakPointLog / breakPoint, c )\n\t\t\t\t\n\t\t\t\tif breakPointLog == 0:\n\t\t\t\t\tn\['log2LinLegalSlope'].setValue( 0, c )\n\t\t\t\telse:\n\t\t\t\t\tn\['log2LinLegalSlope'].setValue( breakPoint / breakPointLog, c )\n\t\n\tif k.name() in \[\"preset\"]:\n\t\tn\['isInit'].setValue(0)\n\t\tif n\['preset'].value() == \"PLogLin\":\n\t\t\tn\['logReference'].setValue(445)\n\t\t\tn\['linReference'].setValue(0.18)\n\t\t\tn\['negativeGamma'].setValue(0.6)\n\t\t\tn\['blackLevel'].setValue(0)\n\t\t\tn\['densPerCV'].setValue(0.002)\n\t\telif n\['preset'].value() == \"AlexaV3LogC\":\n\t\t\tn\['logReference'].setValue(394)\n\t\t\tn\['linReference'].setValue(0.18)\n\t\t\tn\['negativeGamma'].setValue(0.5064)\n\t\t\tn\['blackLevel'].setValue(0.00947)\n\t\t\tn\['densPerCV'].setValue(0.002)\n\t\telif n\['preset'].value() == \"REDLogFilm\":\n\t\t\tn\['logReference'].setValue(460)\n\t\t\tn\['linReference'].setValue(0.18)\n\t\t\tn\['negativeGamma'].setValue(0.6)\n\t\t\tn\['blackLevel'].setValue(0.0109)\n\t\t\tn\['densPerCV'].setValue(0.002)\n\t\telif n\['preset'].value() == \"ACEScc\":\n\t\t\tn\['logReference'].setValue(423)\n\t\t\tn\['linReference'].setValue(0.179784)\n\t\t\tn\['negativeGamma'].setValue(0.387937)\n\t\t\tn\['blackLevel'].setValue(0.0)\n\t\t\tn\['densPerCV'].setValue(0.002)\n\t\telif n\['preset'].value() == \"Cineon\":\n\t\t\tn\['logReference'].setValue(685)\n\t\t\tn\['linReference'].setValue(1.0109155)\n\t\t\tn\['negativeGamma'].setValue(0.6)\n\t\t\tn\['blackLevel'].setValue(0.0109155)\n\t\t\tn\['densPerCV'].setValue(0.002)\n\t\telif n\['preset'].value() == \"Panalog\":\n\t\t\tn\['logReference'].setValue(445)\n\t\t\tn\['linReference'].setValue(0.307)\n\t\t\tn\['negativeGamma'].setValue(0.87778)\n\t\t\tn\['blackLevel'].setValue(0.041)\n\t\t\tn\['densPerCV'].setValue(0.002)\n\t\telif n\['preset'].value() == \"SLog\":\n\t\t\tn\['logReference'].setValue(445)\n\t\t\tn\['linReference'].setValue(0.3243)\n\t\t\tn\['negativeGamma'].setValue(0.8852)\n\t\t\tn\['blackLevel'].setValue(0.037584)\n\t\t\tn\['densPerCV'].setValue(0.002)\n\t\telif n\['preset'].value() == \"SLog2\":\n\t\t\tn\['logReference'].setValue(445)\n\t\t\tn\['linReference'].setValue(0.4141)\n\t\t\tn\['negativeGamma'].setValue(0.7586)\n\t\t\tn\['blackLevel'].setValue(0.04798)\n\t\t\tn\['densPerCV'].setValue(0.002)\n\t\telif n\['preset'].value() == \"CanonLog\":\n\t\t\tn\['logReference'].setValue(454)\n\t\t\tn\['linReference'].setValue(0.5)\n\t\t\tn\['negativeGamma'].setValue(0.933)\n\t\t\tn\['blackLevel'].setValue(0.1)\n\t\t\tn\['densPerCV'].setValue(0.002)\n\t\telif n\['preset'].value() == \"PLogLinEDR\":\n\t\t\tn\['logReference'].setValue(356)\n\t\t\tn\['linReference'].setValue(0.18)\n\t\t\tn\['negativeGamma'].setValue(0.6)\n\t\t\tn\['blackLevel'].setValue(0)\n\t\t\tn\['densPerCV'].setValue(0.0025)\n\t\telif n\['preset'].value() == \"BMDFilm\":\n\t\t\tn\['logReference'].setValue(363)\n\t\t\tn\['linReference'].setValue(0.18)\n\t\t\tn\['negativeGamma'].setValue(0.875)\n\t\t\tn\['blackLevel'].setValue(0.0316)\n\t\t\tn\['densPerCV'].setValue(0.002)\n\t\telif n\['preset'].value() == \"Cinestyle\":\n\t\t\tn\['logReference'].setValue(445)\n\t\t\tn\['linReference'].setValue(0.18)\n\t\t\tn\['negativeGamma'].setValue(0.72)\n\t\t\tn\['blackLevel'].setValue(0.005)\n\t\t\tn\['densPerCV'].setValue(0.002)\n\t\tn\['isInit'].setValue(1)\n"
 addUserKnob {20 logToLin l "Log To Lin"}
 addUserKnob {41 channels T Keymix.channels}
 addUserKnob {26 ""}
 addUserKnob {3 isInit l INVISIBLE -STARTLINE +INVISIBLE}
 isInit 1
 addUserKnob {4 operation t "Whether to convert from or to log-space" M {log2lin lin2log ""}}
 operation lin2log
 addUserKnob {4 preset t "Select loglin conversion parameters commonly used at DNeg." M {PLogLin AlexaV3LogC REDLogFilm ACEScc Cineon Panalog SLog SLog2 CanonLog PLogLinEDR BMDFilm Cinestyle Custom}}
 preset REDLogFilm
 addUserKnob {18 logReference t "This 10bit-log code value will be mapped to the linear reference." R 0 1023}
 logReference 460
 addUserKnob {6 logReference_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {18 linReference t "This value will be mapped to the log reference."}
 linReference 0.18
 addUserKnob {6 linReference_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {18 negativeGamma t "Film response. Film density is the exposed light level raised to this power."}
 negativeGamma 0.6
 addUserKnob {6 negativeGamma_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {18 blackLevel t "This value will be added to the linear signal when converting to log. For use with log-encodings that have a non-zero black level (e.g. Panalog or AlexaV3LogC)." R 0 0.1}
 blackLevel 0.0109
 addUserKnob {6 blackLevel_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {18 densPerCV t "This sets the film density per 10bit-log code value used by the film scanner and which affects the dynamic range that is captured." R 0.0001 0.1}
 densPerCV 0.002
 addUserKnob {6 densPerCV_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 legalize t "This applies a linear section to the bottom end of the loglin curve and can be used to avoid clipping the deep blacks." +STARTLINE}
 addUserKnob {18 lin2LogLegalSlope l INVISIBLE +INVISIBLE}
 lin2LogLegalSlope {7.921296665 7.921296665 7.921296665}
 addUserKnob {6 lin2LogLegalSlope_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {18 log2LinLegalSlope l INVISIBLE +INVISIBLE}
 log2LinLegalSlope {0.1262419579 0.1262419579 0.1262419579}
 addUserKnob {6 log2LinLegalSlope_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {18 lin2LogLegalBreakpoint l INVISIBLE +INVISIBLE}
 lin2LogLegalBreakpoint {0.016078 0.016078 0.016078}
 addUserKnob {6 lin2LogLegalBreakpoint_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {18 log2LinLegalBreakpoint l INVISIBLE +INVISIBLE}
 log2LinLegalBreakpoint {0.1273586078 0.1273586078 0.1273586078}
 addUserKnob {6 log2LinLegalBreakpoint_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {26 ""}
 addUserKnob {41 maskChannelInput l mask T Keymix.maskChannel}
 addUserKnob {6 inject t "Copy mask to the output mask.a channel." -STARTLINE}
 addUserKnob {6 invert_mask l invert t "Invert the use of the mask channel." -STARTLINE}
 addUserKnob {6 fringe t "Use 4*(1-mask)*mask to mix." -STARTLINE}
 addUserKnob {41 unpremult l "(un)premult by" t "The image is divided by this channel before being processed, and mul-\ntiplied again afterwards." T Unpremult.alpha}
 addUserKnob {6 invert_unpremult l invert t "Inverts the use of the (un)premultiply channel." -STARTLINE}
 addUserKnob {41 mix T Keymix.mix}
}
 Input {
  inputs 0
  name mask
  label "\n\n"
  xpos -962
  ypos 422
  number 1
 }
set N83bf0000 [stack 0]
 Dot {
  name Dot4
  xpos -928
  ypos 561
 }
push $N83bf0000
 Input {
  inputs 0
  name Input
  xpos -542
  ypos 30
 }
set N2c2cf800 [stack 0]
 Dot {
  name Dot3
  xpos -789
  ypos 34
 }
 Switch {
  inputs 2
  which {{"\[exists parent.input1]"}}
  name SwitchMaskInput
  xpos -823
  ypos 422
 }
 Expression {
  expr3 4*(1-a)*a
  name ExpressionFringe
  xpos -823
  ypos 457
  disable {{!parent.fringe}}
 }
push $N2c2cf800
 Unpremult {
  alpha -rgba.alpha
  invert {{parent.invert_unpremult}}
  name Unpremult
  xpos -542
  ypos 72
 }
set N2c2ce800 [stack 0]
 Dot {
  name Dot7
  xpos -717
  ypos 76
 }
 Add {
  channels rgb
  value {{parent.blackLevel.r} {parent.blackLevel.g} {parent.blackLevel.b} 0}
  name lin2log_blevel1
  xpos -751
  ypos 204
 }
set N2c2ce000 [stack 0]
 Expression {
  expr0 "r <= 0 ? 0 : ( r < parent.lin2LogLegalBreakpoint.r ? r * parent.lin2LogLegalSlope.r : (( (log10( r / parent.linReference.r ) * parent.negativeGamma.r ) / parent.densPerCV.r ) + parent.logReference.r ) / 1023 )"
  expr1 "g <= 0 ? 0 : ( g < parent.lin2LogLegalBreakpoint.g ? g * parent.lin2LogLegalSlope.g : (( (log10( g / parent.linReference.g ) * parent.negativeGamma.g ) / parent.densPerCV.g ) + parent.logReference.g ) / 1023 )"
  expr2 "b <= 0 ? 0 : ( b < parent.lin2LogLegalBreakpoint.b ? b * parent.lin2LogLegalSlope.b : (( (log10( b / parent.linReference.b ) * parent.negativeGamma.b ) / parent.densPerCV.b ) + parent.logReference.b ) / 1023 )"
  name ExpressionLin2logLegal1
  xpos -641
  ypos 204
 }
push $N2c2ce000
 PLogLin {
  operation "lin to log"
  linref {{parent.linReference.r} {parent.linReference.g} {parent.linReference.b}}
  logref {{parent.logReference.r} {parent.logReference.g} {parent.logReference.b}}
  ngamma {{parent.negativeGamma.r} {parent.negativeGamma.g} {parent.negativeGamma.b}}
  density {{parent.densPerCV.r} {parent.densPerCV.g} {parent.densPerCV.b}}
  name lin2log1
  xpos -751
  ypos 230
 }
 Switch {
  inputs 2
  which {{parent.legalize}}
  name SwitchLin2LogLegalize1
  xpos -641
  ypos 230
 }
 Dot {
  name Dot9
  xpos -607
  ypos 353
 }
push $N2c2ce800
 Dot {
  name Dot8
  xpos -342
  ypos 76
 }
 Dot {
  name Dot6
  xpos -342
  ypos 168
 }
set N122b6800 [stack 0]
 Dot {
  name Dot5
  xpos -439
  ypos 168
 }
 Expression {
  expr0 "r <= 0 ? 0 : ( r < parent.log2LinLegalBreakpoint.r ? r * parent.log2LinLegalSlope.r : pow( 10, ( r * 1023 - parent.logReference.r) * parent.densPerCV.r / parent.negativeGamma.r ) * parent.linReference.r )"
  expr1 "g <= 0 ? 0 : ( g < parent.log2LinLegalBreakpoint.g ? g * parent.log2LinLegalSlope.g : pow( 10, ( g * 1023 - parent.logReference.g) * parent.densPerCV.g / parent.negativeGamma.g ) * parent.linReference.g )"
  expr2 "b <= 0 ? 0 : ( b < parent.log2LinLegalBreakpoint.b ? b * parent.log2LinLegalSlope.b : pow( 10, ( b * 1023 - parent.logReference.b) * parent.densPerCV.b / parent.negativeGamma.b ) * parent.linReference.b )"
  name ExpressionLog2LinLegal
  xpos -473
  ypos 249
 }
push $N122b6800
 PLogLin {
  linref {{parent.linReference.r} {parent.linReference.g} {parent.linReference.b}}
  logref {{parent.logReference.r} {parent.logReference.g} {parent.logReference.b}}
  ngamma {{parent.negativeGamma.r} {parent.negativeGamma.g} {parent.negativeGamma.b}}
  density {{parent.densPerCV.r} {parent.densPerCV.g} {parent.densPerCV.b}}
  name lgo2lin
  xpos -376
  ypos 218
 }
 Switch {
  inputs 2
  which {{parent.legalize}}
  name SwitchLog2LinLegalize
  xpos -376
  ypos 249
 }
 Add {
  channels rgb
  value {{-parent.blackLevel.r} {-parent.blackLevel.g} {-parent.blackLevel.b} 0}
  name log2lin_blevel
  xpos -376
  ypos 294
 }
 Dot {
  name Dot10
  xpos -342
  ypos 353
 }
 Switch {
  inputs 2
  which {{parent.operation}}
  name SwitchOperation
  xpos -542
  ypos 349
 }
 Premult {
  channels {{{Unpremult.channels}}}
  alpha {{{Unpremult.alpha}}}
  invert {{parent.Unpremult.invert}}
  name Premult
  xpos -542
  ypos 410
 }
push $N2c2cf800
 Dot {
  name Dot1
  xpos -178
  ypos 34
 }
 Dot {
  name Dot2
  xpos -178
  ypos 461
 }
 Keymix {
  inputs 3
  channels rgb
  maskChannel -rgba.alpha
  invertMask {{"(equal(maskChannel,0) ^ parent.invert_mask) | equal(maskChannel,0)"}}
  name Keymix
  xpos -542
  ypos 457
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 mask.a
  name CopyInject
  xpos -542
  ypos 551
  disable {{!parent.inject}}
 }
 Output {
  name Output
  xpos -542
  ypos 672
 }
end_group
