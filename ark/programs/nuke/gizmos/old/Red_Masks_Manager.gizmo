set cut_paste_input [stack 0]
version 7.0 v4
push $cut_paste_input
Group {
 name Red_Masks
 tile_color 0xff0015ff
 label "\[split \[value Expression1.expr3]]"
 note_font_size 8
 selected true
 addUserKnob {20 User}
 addUserKnob {22 AddMask l "Add +" T "import math\nimport random\ndef addMask():\n    \n\n\n    panel = nuke.Panel('Select Red Masks')\n    node = nuke.thisNode()\n    booleanCheckBox = None\n    contentmask = nuke.toNode('Expression1')\['expr3']\n    chanList = \[]\n    function = \[]\n    alphaUse = \[]\n    elements = ''\n    for i in node.channels():\n            if i.startswith('M_'):\n                    if i.endswith('.red'):\n                            checkbox = panel.addBooleanCheckBox(i, booleanCheckBox)\n                            chanList.append(i)\n                            function.append('print(\\''+str(i)+'\\')')\n                            elements = elements + ' ' +  i.split('.')\[0]\n    if chanList == \[]:\n        \n       nuke.message('This Node Has No Masks!!!')\n    else:\n        panel.show()\n        prettychanList = list( set(\[c.split('.')\[0] for c in chanList]) )\n        prettychanList.sort()\n    \n\n        for i in chanList:\n                boolVal = panel.value(i)\n                if boolVal == True:\n                        alphaUse.append(i)\n\n        h = contentmask.getValue() + '+' + '+'.join(alphaUse)\n    \n        m = ''\n        if alphaUse == \[]:\n                print 'no masks'\n        else:\n                stab = nuke.thisNode()\n                for i in alphaUse:\n                    id = int(math.floor(random.random()*999))\n                    mask = nuke.Enumeration_Knob(\"Red_Mask_\" + str(id), \"Mask:\" , prettychanList)\n                    mask.setValue(i)\n                    refresh = nuke.PyScript_Knob('refresh_' + str(id),\"<img src='Q:/USERS/Mario_Pece/Scripts/Nuke/RED Masks/icons/refresh.png' border='0' />\",\"\"\"\nstab = nuke.thisNode()\ncontentmask = nuke.toNode('Expression1')\['expr3']\nmask = stab\['Red_Mask_\"\"\" + str(id) + \"\"\"'].value()\noldMask = stab\['currentMask_\"\"\" + str(id) +\"\"\"'].getValue()\nplus = '+' + str(oldMask)\nstab\['currentMask_\"\"\" + str(id) +\"\"\"'].setValue(str(mask))\n\nif plus in contentmask.getValue():\n    submask = contentmask.getValue().replace('+' + str(oldMask),'+' + str(mask) + '.red')\n    contentmask.setValue(submask)\nelse:\n    submask = contentmask.getValue().replace('-' + str(oldMask),'-' + str(mask) + '.red')\n    contentmask.setValue(submask)\n\n\"\"\")\n                    sub = nuke.PyScript_Knob('sub_' + str(id),\"Adding\",\"\"\"\nstab = nuke.thisNode()\nmask = stab\['Red_Mask_\"\"\" + str(id) + \"\"\"'].value()\nplus = '+' + str(mask)\ncontentmask = nuke.toNode('Expression1')\['expr3']\nif plus in contentmask.getValue():\n    stab\['sub_\"\"\" + str(id) +\"\"\"'].setLabel(\"Subtracting\")\n    stab\['sub_\"\"\" + str(id) +\"\"\"'].clearFlag(0)\n    submask = contentmask.getValue().replace('+' + str(mask),'-' + str(mask))\nelse:\n    stab\['sub_\"\"\" + str(id) +\"\"\"'].setLabel(\"Adding\")\n    stab\['sub_\"\"\" + str(id) +\"\"\"'].clearFlag(0)\n    submask = contentmask.getValue().replace('-' + str(mask),'+' + str(mask))\ncontentmask.setValue(submask)\n\n\"\"\")\n                    remove = nuke.PyScript_Knob('remove_' + str(id),'Remove',\"\"\"\n                \n\nimport re\nstab = nuke.thisNode()\nmask = stab\['Red_Mask_\"\"\" + str(id) + \"\"\"'].value()\nplus = '+' + str(mask)\nstab.removeKnob(stab\[\"Red_Mask_\"\"\" + str(id) +\"\"\"\"])\nstab.removeKnob(stab\[\"refresh_\"\"\" + str(id) +\"\"\"\"])\nstab.removeKnob(stab\[\"sub_\"\"\" + str(id) +\"\"\"\"])\nstab.removeKnob(stab\[\"remove_\"\"\" + str(id) +\"\"\"\"])\nstab.removeKnob(stab\[\"currentMask_\"\"\" + str(id) +\"\"\"\"])\nstab.removeKnob(stab\[\"divider_\"\"\" + str(id) +\"\"\"\"])\ncontentmask = nuke.toNode('Expression1')\['expr3']\n\nif plus in contentmask.getValue():\n    removemask = contentmask.getValue().replace('+' + str(mask) + '.red','')\n    contentmask.setValue(removemask)\nelse:\n    removemask = contentmask.getValue().replace('-' + str(mask) + '.red','')\n    contentmask.setValue(removemask)\n\n\"\"\")\n\n\n                    divider = nuke.Text_Knob('divider_' + str(id),'')\n                    currentMask = nuke.String_Knob('currentMask_' + str(id),'') \n                    stab.addKnob(mask)\n                    stab.addKnob(refresh)\n                    stab.addKnob(sub)\n                    stab.addKnob(remove)\n                    stab.addKnob(currentMask)\n                    stab.addKnob(divider)\n                    stab\['currentMask_' + str(id)].setValue(str(i))\n                    currentMask.setFlag(nuke.INVISIBLE)\n                nuke.toNode('Expression1')\['expr3'].setValue(h)\n                \n                        \n            \n\n\n    \n   \n\naddMask()" +STARTLINE}
 addUserKnob {26 ""}
}
 Input {
  inputs 0
  name Input1
  xpos 24
  ypos -9
 }
 Expression {
  name Expression1
  xpos 24
  ypos 87
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle1
  label "\[value in]"
  xpos 24
  ypos 249
 }
 Output {
  name Output1
  xpos 24
  ypos 303
 }
end_group
